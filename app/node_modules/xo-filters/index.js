import angular from 'angular'
import forEach from 'lodash.foreach'
import includes from 'lodash.includes'
import isEmpty from 'lodash.isempty'
import isNumber from 'lodash.isnumber'
import map from 'lodash.map'
import slice from 'lodash.slice'
import xoApi from 'xo-api'
import moment from 'moment'

// ===================================================================

export default angular.module('xoWebApp.filters', [
  xoApi
])

  // The bytes filters takes a number and formats it using adapted
  // units (KB, MB, etc.).
  .filter('bytesToSize', () => {
    const powers = ['', 'K', 'M', 'G', 'T', 'P']

    return function bytesToSize (bytes, unit = 'iB', base = 1024) {
      if (!isNumber(bytes)) {
        return bytes
      }

      let i = 0
      while (bytes >= base) {
        bytes /= base
        ++i
      }

      if (bytes === -1) {
        return '-'
      }

      // Maximum 1 decimals.
      bytes = ((bytes * 10) | 0) / 10

      return `${bytes} ${powers[i]}${unit}`
    }
  })

  // Takes a size (eg.: '8 GiB') and returns a number of bytes
  .filter('sizeToBytes', () => {
    const powers = ['', 'K', 'M', 'G', 'T', 'P']

    return function sizeToBytes (size, unit = 'iB', base = 1024) {
      const split = size.split(' ')
      if (split.length !== 2) {
        return size
      }
      let number = +split[0]
      const powerUnit = split[1]
      const power = powerUnit.slice(0, 1)
      const effUnit = powerUnit.slice(1)

      if (!includes(powers, power) || unit !== effUnit) {
        return size
      }

      let i = 0
      while (powers[i] !== power) {
        number *= base
        ++i
      }

      return number
    }
  })

  // Takes a number of bytes and converts it to the desired unit (GiB, MiB, etc.).
  .filter('bytesConvert', () => {
    return function bytesConvert (bytes, powerUnit = 'GiB', unit = 'iB', base = 1024) {
      let powerUnits = ['', 'K', 'M', 'G', 'T', 'P']
      powerUnits = powerUnits.map(pu => pu + unit)

      if (!isNumber(bytes) || !includes(powerUnits, powerUnit)) {
        return bytes
      }

      let i = 0
      while (powerUnit !== powerUnits[i]) {
        bytes /= base
        ++i
      }

      if (bytes === -1) {
        return '-'
      }

      // Maximum 1 decimals.
      bytes = ((bytes * 10) | 0) / 10

      return bytes
    }
  })

  // Simply returns the number of elements in the collection.
  .filter('count', () => {
    const {hasOwnProperty} = Object.prototype

    return function count (collection) {
      if (typeof collection !== 'object') {
        return 0
      }

      // Array.
      if (angular.isArray(collection)) {
        return collection.length
      }

      // Object.
      let n = 0
      for (let key in collection) {
        if (hasOwnProperty.call(collection, key)) {
          ++n
        }
      }
      return n
    }
  })

  // Resolves links between objects.
  .filter('resolve', (xoApi) => xoApi.get)

  .filter('isEmpty', () => isEmpty)
  .filter('isNotEmpty', () => (collection) => !isEmpty(collection))
  .filter('includes', () => includes)

  .filter('duration', () => (n, unit = 'ms') => (n > 0 && moment.duration(n, unit).humanize() || ''))

  .filter('slice', () => slice)

  // Applies a function to a list of items.
  //
  // If a string is used instead of a function, it will be used as a
  // property name to extract from each item.
  .filter('map', () => map)

  .filter('percentage', () => {
    return function percentage (value) {
      // If `value` is an array of two values, divide the first by the
      // second and multiply by 100.
      if (value.length === 2) {
        // Special case, if the divider is 0, simply returns "N/A".
        if (value[1] === 0) {
          return 'N/A'
        }

        const result = 100 * value[0] / value[1]
        if (isNaN(result)) {
          return 'N/A'
        }

        value = result
      }

      // No decimals at most.
      value = Math.round(value * 1e0) / 1e0

      return `${value}%`
    }
  })

  .filter('osFamily', () => {
    const osToFamily = (function (osByFamily) {
      const osToFamily = Object.create(null)

      forEach(osByFamily, (list, family) => {
        forEach(list, os => {
          osToFamily[os] = family
        })
      })

      return osToFamily
    })({
      linux: [
        'CoreOS'
      ],
      centos: [
        'centos'
      ],
      debian: [
        'debian'
      ],
      fedora: [
        'fedora'
      ],
      gentoo: [
        'gentoo'
      ],
      oracle: [
        'oracle'
      ],
      redhat: [
        'redhat',
        'rhel'
      ],
      ubuntu: [
        'ubuntu'
      ],
      solaris: [
        'solaris'
      ],
      freebsd: [
        'freebsd',
        'freeBSD',
        'FreeBSD'
      ],
      netbsd: [
        'netbsd'
      ],
      osx: [
        'osx'
      ],
      'linux-mint': [
        'linux-mint'
      ],
      suse: [
        'sles',
        'suse'
      ],
      windows: [
        'windows'
      ]
    })

    return (osName) => osToFamily[osName] || 'other'
  })

  // A module exports its name.
  .name
