import angular from 'angular'
import forEach from 'lodash.foreach'

// -------------------------------------------------------------------

const defaultIsSelected = (object) => object != null && object.selected
const defaultSelect = (object) => {
  if (object != null) {
    object.selected = true
  }
}
const defaultUnselect = (object) => {
  if (object != null) {
    object.selected = false
  }
}

export default angular.module('master-select', [])
  .directive('masterSelect', function () {
    return {
      link ($scope, $elem, $attrs) {
        const isSelected = defaultIsSelected
        const select = defaultSelect
        const unselect = defaultUnselect

        let internalChange = false
        $scope.$watch('items', items => {
          if (internalChange) {
            internalChange = false
            return
          }

          const selected = $scope.selectedItems = Object.create(null)
          let nAll = 0
          let nSelected = 0
          forEach(items, (item, key) => {
            ++nAll

            if (isSelected(item, key, items)) {
              selected[key] = item
              ++nSelected
            }
          })

          const indeterminate = nSelected && nSelected !== nAll

          const previousNgModel = $scope.ngModel
          $scope.ngModel = indeterminate || Boolean(nSelected)
          if (previousNgModel !== $scope.ngModel) {
            internalChange = true
          }

          $elem.prop('indeterminate', indeterminate)
        }, true)

        $scope.$watch('ngModel', selected => {
          if (internalChange) {
            internalChange = false
            return
          }
          internalChange = true

          $elem.prop('indeterminate', false)

          const {items} = $scope
          const selectedItems = $scope.selectedItems = Object.create(null)

          forEach(items, selected
            ? (item, key) => {
              select(item, key, items)
              selectedItems[key] = item
            }
            : (item, key) => {
              unselect(item, key, items)
            }
          )
        })
      },
      restrict: 'A',
      scope: {
        items: '=masterSelect',
        ngModel: '=',
        selectedItems: '=?'
      }
    }
  })
  .name
