import angular from 'angular'
import find from 'lodash.find'
import forEach from 'lodash.foreach'
import includes from 'lodash.includes'
import map from 'lodash.map'
import marked from 'marked'
import remove from 'lodash.remove'
import trim from 'lodash.trim'
import Bluebird from 'bluebird'
Bluebird.longStackTraces()

import arrayInputView from './array-input-view'
import booleanInputView from './boolean-input-view'
import enumInputView from './enum-input-view'
import hostInputView from './host-input-view'
import integerInputView from './integer-input-view'
import numberInputView from './number-input-view'
import objectInputView from './object-input-view'
import poolInputView from './pool-input-view'
import srInputView from './sr-input-view'
import stringInputView from './string-input-view'
import vmInputView from './vm-input-view'
import xoEntityInputView from './xo-entity-input-view'
import xoObjectInputView from './xo-object-input-view'
import xoRoleInputView from './xo-role-input-view'

// ====================================================================

const getType = function (param, attribute = 'type') {
  if (!param) {
    return
  }
  if (Array.isArray(param[attribute])) {
    if (includes(param[attribute], 'integer')) {
      return 'integer'
    } else if (includes(param[attribute], 'number')) {
      return 'number'
    } else {
      return 'string'
    }
  }
  return param[attribute]
}

const getXoType = param => getType(param, '$type')
/**
 * Tries extracting XO Object targeted property
 */
const reduceXoObject = function (value, propertyName = 'id') {
  return value && value[propertyName] || value
}

// ====================================================================

const isRequired = function (param) {
  if (!param) {
    return
  }

  return !param.optional
}

const _initXoObjectInput = function () {
  if (this.model === undefined) {
    this.model = []
  }
  if (!Array.isArray(this.model)) {
    this.model = [this.model]
  }
  this.intraModel = map(this.model, value => find(this.objects, object => object.id === value) || value)
}

const _exportRemove = function (removedItem) {
  remove(this.model, item => item === reduceXoObject(removedItem))
}

const _exportSelect = function (addedItem) {
  const addOn = reduceXoObject(addedItem)
  if (!find(this.model, item => item === addOn)) {
    this.model.push(addOn)
  }
}

// ====================================================================

export default angular.module('xoWebApp.jsonSchema', [])

.directive('stringInput', function () {
  return {
    restrict: 'E',
    scope: {
      model: '=',
      form: '=',
      key: '=',
      property: '='
    },
    bindToController: true,
    controller: function () {
      this.isRequired = () => isRequired(this.property)
      this.isPassword = (this.key.search(/password|secret/i) !== -1)
      this.active = () => getType(this.property) === 'string' && !getXoType(this.property)
    },
    controllerAs: 'ctrl',
    template: stringInputView
  }
})

.directive('booleanInput', function () {
  return {
    restrict: 'E',
    scope: {
      model: '=',
      form: '=',
      key: '=',
      property: '='
    },
    bindToController: true,
    controller: function () {
      this.isRequired = () => isRequired(this.property)
      this.active = () => getType(this.property) === 'boolean'
    },
    controllerAs: 'ctrl',
    template: booleanInputView
  }
})

.directive('integerInput', function () {
  return {
    restrict: 'E',
    scope: {
      model: '=',
      form: '=',
      key: '=',
      property: '='
    },
    bindToController: true,
    controller: function () {
      this.isRequired = () => isRequired(this.property)
      this.active = () => getType(this.property) === 'integer'
    },
    controllerAs: 'ctrl',
    template: integerInputView
  }
})

.directive('numberInput', function () {
  return {
    restrict: 'E',
    scope: {
      model: '=',
      form: '=',
      key: '=',
      property: '='
    },
    bindToController: true,
    controller: function () {
      this.isRequired = () => isRequired(this.property)
      this.active = () => getType(this.property) === 'number'
    },
    controllerAs: 'ctrl',
    template: numberInputView
  }
})

.directive('enumInput', function () {
  return {
    restrict: 'E',
    scope: {
      model: '=',
      form: '=',
      key: '=',
      property: '='
    },
    bindToController: true,
    controller: function () {
      this.isRequired = () => isRequired(this.property)
      this.active = () => this.property.enum
    },
    controllerAs: 'ctrl',
    template: enumInputView
  }
})

.directive('arrayInput', function ($compile) {
  return {
    restrict: 'E',
    scope: {
      model: '=',
      form: '=',
      key: '=',
      property: '='
    },
    controller: 'ArrayInput as ctrl',
    bindToController: true,
    link: function (scope, element, attrs) {
      scope.isObject = (variable) => !Array.isArray(variable) && typeof variable === 'object'
      const updateElement = () => {
        if (scope.ctrl.property.items) {
          element.append(arrayInputView)
        }
        $compile(element.contents())(scope)
      }

      updateElement()
    }
  }
})
.controller('ArrayInput', function ($scope) {
  this.isRequired = () => false
  this.getType = getType
  this.active = () => getType(this.property) === 'array'
  this.add = value => {
    const type = getType(this.property.items)
    switch (type) {
      case 'boolean':
        value = Boolean(value)
        break
      case 'string':
        value = trim(value)
        break
    }
    this.model.push(value)
  }
  this.remove = index => this.model.splice(index, 1)
  const init = () => {
    if (this.model === undefined || this.model === null) {
      this.model = []
    }
  }

  if (this.active()) {
    init()
    if (!Array.isArray(this.model)) {
      throw new Error('arrayInput directive model must be an array')
    }
    $scope.$watch(() => this.model, init)
  }
})

.directive('objectInput', function ($compile) {
  return {
    restrict: 'E',
    scope: {
      model: '=',
      form: '=',
      key: '=',
      property: '='
    },
    controller: 'ObjectInput as ctrl',
    bindToController: true,
    link: function (scope, element, attrs) {
      const updateElement = () => {
        if (scope.ctrl.property.properties) {
          element.append(objectInputView)
        }
        $compile(element.contents())(scope)
      }

      updateElement()
    }
  }
})
.controller('ObjectInput', function ($scope) {
  this.isRequired = () => isRequired(this.property)
  this.active = () => getType(this.property) === 'object' && !getXoType(this.property)
  const init = () => {
    if (this.model === undefined || this.model === null) {
      this.model = {
        __use: this.isRequired()
      }
    }
    if (typeof this.model !== 'object' || Array.isArray(this.model)) {
      throw new Error('objectInput directive model must be a plain object')
    }
    const use = this.model.__use
    delete this.model.__use
    this.model.__use = Object.keys(this.model).length > 0 || use
    forEach(this.property.properties, (property, key) => {
      if (getType(property) === 'boolean') {
        this.model[key] = Boolean(this.model[key])
      }
    })
  }

  if (this.active()) {
    init()
    $scope.$watch(() => this.model, (newVal, oldVal) => {
      if (newVal !== oldVal) {
        init()
      }
    })
  }
})

.directive('vmInput', function () {
  return {
    restrict: 'E',
    scope: {
      form: '=',
      key: '=',
      property: '=',
      model: '='
    },
    controller: 'VmInput as ctrl',
    bindToController: true,
    template: vmInputView
  }
})
.controller('VmInput', function ($scope, xoApi) {
  this.objects = xoApi.all
  this.isRequired = () => isRequired(this.property)
  this.active = () => getXoType(this.property) === 'Vm'

  this.init = _initXoObjectInput
  this.exportRemove = _exportRemove
  this.exportSelect = _exportSelect

  if (this.active()) {
    this.init()
    $scope.$watch(() => this.model, (newVal, oldVal) => {
      if (newVal !== oldVal) {
        this.init()
      }
    })
  }
})

.directive('hostInput', function () {
  return {
    restrict: 'E',
    scope: {
      form: '=',
      key: '=',
      property: '=',
      model: '='
    },
    controller: 'HostInput as ctrl',
    bindToController: true,
    template: hostInputView
  }
})
.controller('HostInput', function ($scope, xoApi) {
  this.objects = xoApi.all
  this.isRequired = () => isRequired(this.property)
  this.active = () => getXoType(this.property) === 'Host'

  this.init = _initXoObjectInput
  this.exportRemove = _exportRemove
  this.exportSelect = _exportSelect

  if (this.active()) {
    this.init()
    $scope.$watch(() => this.model, (newVal, oldVal) => {
      if (newVal !== oldVal) {
        this.init()
      }
    })
  }
})

.directive('srInput', function () {
  return {
    restrict: 'E',
    scope: {
      form: '=',
      key: '=',
      property: '=',
      model: '='
    },
    controller: 'SrInput as ctrl',
    bindToController: true,
    template: srInputView
  }
})
.controller('SrInput', function ($scope, xoApi) {
  this.objects = xoApi.all
  this.isRequired = () => isRequired(this.property)
  this.active = () => getXoType(this.property) === 'Sr'

  this.init = _initXoObjectInput
  this.exportRemove = _exportRemove
  this.exportSelect = _exportSelect

  if (this.active()) {
    this.init()
    $scope.$watch(() => this.model, (newVal, oldVal) => {
      if (newVal !== oldVal) {
        this.init()
      }
    })
  }
})

.directive('poolInput', function () {
  return {
    restrict: 'E',
    scope: {
      form: '=',
      key: '=',
      property: '=',
      model: '='
    },
    controller: 'PoolInput as ctrl',
    bindToController: true,
    template: poolInputView
  }
})
.controller('PoolInput', function ($scope, xoApi) {
  this.objects = xoApi.all
  this.isRequired = () => isRequired(this.property)
  this.active = () => getXoType(this.property) === 'Pool'

  this.init = _initXoObjectInput
  this.exportRemove = _exportRemove
  this.exportSelect = _exportSelect

  if (this.active()) {
    this.init()
    $scope.$watch(() => this.model, (newVal, oldVal) => {
      if (newVal !== oldVal) {
        this.init()
      }
    })
  }
})

.directive('xoEntityInput', function () {
  return {
    restrict: 'E',
    scope: {
      form: '=',
      key: '=',
      property: '=',
      model: '='
    },
    controller: 'XoEntityInput as ctrl',
    bindToController: true,
    template: xoEntityInputView
  }
})
.controller('XoEntityInput', function ($scope, xo) {
  this.ready = false
  this.isRequired = () => isRequired(this.property)
  this.active = () => this.ready && getXoType(this.property) === 'XoEntity'

  this.init = _initXoObjectInput
  this.exportRemove = _exportRemove
  this.exportSelect = _exportSelect

  Bluebird.props({
    users: xo.user.getAll(),
    groups: xo.group.getAll()
  })
  .then(p => {
    this.objects = p.users.concat(p.groups)
    this.ready = true
    if (this.active()) {
      this.init()
      $scope.$watch(() => this.model, (newVal, oldVal) => {
        if (newVal !== oldVal) {
          this.init()
        }
      })
    }
  })
})

.directive('xoRoleInput', function () {
  return {
    restrict: 'E',
    scope: {
      form: '=',
      key: '=',
      property: '=',
      model: '='
    },
    controller: 'XoRoleInput as ctrl',
    bindToController: true,
    template: xoRoleInputView
  }
})
.controller('XoRoleInput', function ($scope, xo) {
  this.ready = false
  this.isRequired = () => isRequired(this.property)
  this.active = () => this.ready && getXoType(this.property) === 'XoRole'

  this.init = _initXoObjectInput
  this.exportRemove = _exportRemove
  this.exportSelect = _exportSelect

  xo.role.getAll()
  .then(roles => {
    this.objects = roles
    this.ready = true
    if (this.active()) {
      this.init()
      $scope.$watch(() => this.model, (newVal, oldVal) => {
        if (newVal !== oldVal) {
          this.init()
        }
      })
    }
  })
})

.directive('xoObjectInput', function () {
  return {
    restrict: 'E',
    scope: {
      form: '=',
      key: '=',
      property: '=',
      model: '='
    },
    controller: 'XoObjectInput as ctrl',
    bindToController: true,
    template: xoObjectInputView
  }
})
.controller('XoObjectInput', function ($scope, xoApi, filterFilter, selectHighLevelFilter) {
  const HIGH_LEVEL_OBJECTS = {
    pool: true,
    host: true,
    VM: true,
    SR: true,
    network: true
  }
  this.types = Object.keys(HIGH_LEVEL_OBJECTS)
  this.objects = xoApi.all

  this.isRequired = () => isRequired(this.property)
  this.active = () => getXoType(this.property) === 'XoObject'
  this.toggleType = (toggle, type) => {
    const selectedObjects = this.intraModel && this.intraModel.slice() || []
    if (toggle) {
      const objects = filterFilter(selectHighLevelFilter(this.objects), {type})
      forEach(objects, object => { selectedObjects.indexOf(object) === -1 && selectedObjects.push(object) })
      this.intraModel = selectedObjects
    } else {
      const keptObjects = []
      for (let index in selectedObjects) {
        const object = selectedObjects[index]
        if (object.type !== type) {
          keptObjects.push(object)
        }
      }
      this.intraModel = keptObjects
    }
    this.model.length = 0
    forEach(this.intraModel, item => this.model.push(reduceXoObject(item)))
  }

  this.init = _initXoObjectInput
  this.exportRemove = _exportRemove
  this.exportSelect = _exportSelect

  if (this.active()) {
    this.init()
    $scope.$watch(() => this.model, (newVal, oldVal) => {
      if (newVal !== oldVal) {
        this.init()
      }
    })
  }
})

.filter('md2html', function ($sce) {
  return function (input) {
    return $sce.trustAsHtml(marked(input || ''))
  }
})

// A module exports its name.
.name
