'use strict'

import angular from 'angular'
import clone from 'lodash.clonedeep'
import map from 'lodash.map'
import d3 from 'd3'
import xoBreadcrumbsD3 from 'xo-breadcrumbs-d3'

export default angular.module('xoCirlcleD3', [xoBreadcrumbsD3])
  .directive('circleChart', function ($parse, $compile, $timeout) {
    function link (scope, element, attrs) {
      var width,
        color_scale,
        svg,
        focus,
        view,
        circles,
        container,
        root,
        zoom_level

      view = [1000, 1000, 2000]
      width = attrs.width ? parseInt(attrs.width, 10) : 2000
      color_scale = d3.scale.category10()
      scope.breadcrumbsNodes = []
      var el = $compile('<breadcrumbs-d3 nodes="breadcrumbsNodes"></breadcrumbs-d3>')(scope)
      element.append(el)

      // took responsive svg trick from http://demosthenes.info/blog/744/Make-SVG-Responsive
      container = d3.select(element[0])
        .append('div')
        .attr('style', 'position: relative;width: 90%;padding-bottom: 100%;margin-left:5%; vertical-align: middle;overflow: hidden;')
        .append('svg')
        .attr('style', 'display: block;position: absolute; top: 0;left: 0;')
        .attr('width', '100%')
        .attr('height', '100%')
        .attr('preserveAspectRatio', 'xMinYMin meet')
        .attr('viewBox', '0 0 2000 2000')
      svg = container.append('g')
        .style('transform-origin', 'center center')
        .attr('transform', 'translate(' + width / 2 + ',' + width / 2 + ')')

      container.on('click', () => zoom(root))
      const pack = d3.layout.pack()
          .padding(2)
          .size([2000, 2000])
          .value((d) => d.virtual ? 0 : d.size)

      scope.$watch(() => scope.chartData, function (newVal) {
        root = clone(newVal)
        focus = root

        circles = svg
          .datum(root)
          .selectAll('.node')
          .data(pack.nodes)
          .enter()
          .append('g')
          .attr('class', (d) => d.children ? 'node' : 'leaf node')
          .style('fill', color)
          .on('click', function (d) { if (!d.virtual && focus !== d) { zoom(d); d3.event.stopPropagation() } })
          .on('mouseover', function (d) {
            const sequenceArray = getAncestors(d.id)
            const toBreadCrumbs = map(sequenceArray, function (node) {
              return {name: node.name, fill: color(node)}
            })
            $timeout(function () {
              scope.breadcrumbsNodes = toBreadCrumbs
            }, 0)
          })
        circles.append('title')
            .text((d) => d.name + ': ' + (d.textSize || d.size || ''))

        circles.filter((d) => !d.virtual)
            .append('circle')
            .attr('r', (d) => d.r)

        circles
          .filter((d) => !d.children)
          .append('text')
          .attr('dy', '.3em')
          .style('text-anchor', 'middle')
          .text((d) => d.name)
          .style('font-size', (width / 50) + 'px')
          .style('fill', 'black')
          .each(function (d) { wrapText.apply(this, [d.r]) })

        svg.selectAll('circle').style({
          'fill-opacity': 0.25,
          'stroke': 'rgb(31, 119, 180)',
          'stroke-width': (width / 600) + 'px'
        })

        svg.selectAll('.leaf circle').style({
          'fill-opacity': 1
        })

        setTimeout(function () {
          zoomTo([root.x, root.y, root.r * 2])
        }, 0)
      })

      function zoom (node) {
        focus = node
        svg.transition()
            .duration(d3.event.altKey ? 7500 : 750)
            .tween('zoom', function (d) {
              var i = d3.interpolateZoom(view, [focus.x, focus.y, focus.r * 2])
              return function (t) { zoomTo(i(t)) }
            })
      }

      function zoomTo (v) {
        zoom_level = width / v[2]
        svg.selectAll('circle,text').attr('transform', function (d) { return 'translate(' + (d.x - v[0]) * zoom_level + ',' + (d.y - v[1]) * zoom_level + ')' })
        svg.selectAll('circle').attr('r', (d) => d.r * zoom_level)
        svg.selectAll('text')
          .text((d) => d.name)
          .each(function (d) { wrapText.apply(this, [zoom_level * d.r]) })
        view = v
      }
      function color (d) {
        if (d.color) {
          return d.color
        }
        return color_scale(d.name)
      }

      function wrapText (width) {
        var self,
          textLength,
          text

        self = d3.select(this)
        text = self.text()
        if (!text || text.length === 0 || !width || focus.depth === 0 /* no text if fully zoomed out */) {
          self.text('')
        } else {
          textLength = self.node().getComputedTextLength()
          while (textLength > width && text.length > 0) {
            text = text.slice(0, -1)
            self.text(text + '...')
            textLength = self.node().getComputedTextLength()
          }
        }
      }

      function getAncestors (id) {
        var path = []
        svg.selectAll('.node')
          .each(function (node) {
            if (node.id === id) {
              var current = node
              while (current.parent) {
                path.unshift(current)
                current = current.parent
              }
            }
          })
        return path
      }
    }

    return {
      resctict: 'E',
      replace: false,
      scope: {
        chartData: '=',
        selected: '=',
        log: '=',
        over: '&',
        click: '&'
      },
      link: link
    }
  })
  // A module exports its name.
  .name
