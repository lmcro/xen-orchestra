'use strict'

import angular from 'angular'
import d3 from 'd3'

const $ = window.$

export default angular.module('xoBreadcrumbsD3', [])
  .directive('breadcrumbsD3', function ($parse) {
    function link (scope, element, attrs) {
      var height,
        color_scale,
        b,
        breadcrumbs,
        max_depth

      scope.$watch(() => scope.nodes, updateBreadcrumbs, true)
      scope.$watch(() => scope.maxDepth, updateBreadcrumbs)

      max_depth = scope.max_depth || 3
      height = attrs.height || 30
      color_scale = d3.scale.category10()
      b = {
        w: 75, h: height, s: 3, t: 10
      }

      breadcrumbs = d3.select(element[0])
        .append('div')
        .attr('class', 'breadcrumbs-container')
        .style({height: '40px', 'text-align': 'left'})
        .append('svg:svg')
        .style({'width': '100%'})
        .attr('class', 'breadcrumbs')
        .attr('height', 40)

      function color (d) {
        if (d.color) {
          return d.color
        }
        return color_scale(d.name)
      }

      // from http://stackoverflow.com/questions/15975440/add-ellipses-to-overflowing-text-in-svg
      function wrapText () {
        var self,
          textLength,
          text

        self = d3.select(this)
        textLength = self.node().getComputedTextLength()
        text = self.text()
        while (textLength > (b.w - 2 * b.s) && text.length > 0) {
          text = text.slice(0, -1)
          self.text(text + '...')
          textLength = self.node().getComputedTextLength()
        }
      }

      // Generate a string that describes the points of a breadcrumb polygon.
      function breadcrumbPoints (d, i) {
        var points = []
        points.push('0,0')
        points.push(b.w + ',0')
        points.push(b.w + b.t + ',' + (b.h / 2))
        points.push(b.w + ',' + b.h)
        points.push('0,' + b.h)
        if (i > 0) { // Leftmost breadcrumb don't include 6th vertex.
          points.push(b.t + ',' + (b.h / 2))
        }
        return points.join(' ')
      }

      // Update the breadcrumb trail to show the current sequence and percentage.
      function updateBreadcrumbs () {
        var g = breadcrumbs
          .selectAll('g')
          .data(scope.nodes, function (d, pos) {
            return d.name + pos
          })
        max_depth = Math.max(scope.nodes.length, max_depth, scope.maxDepth || 0)

        var $e = $(element[0])
        while ($e.width() === 0 && $e.parent()) {
          $e = $e.parent()
        }
        if ($e.width()) {
          b.w = ($e.width() - b.t) / max_depth - b.s
        }

        // Add breadcrumb and label for entering nodes.
        var entering = g.enter().append('svg:g')

        entering.append('svg:polygon')
          .attr('points', breadcrumbPoints)
          .attr('fill', (d) => d.fill ? d.fill : color(d.name))

        entering.append('svg:text')
          .attr('x', (b.w + b.t) / 2)
          .attr('y', b.h / 2)
          .attr('dy', '0.35em')
          .attr('text-anchor', 'middle')
          .text((d) => d.name)
          .each(wrapText)

        // Set position for entering and updating nodes.
        g.attr('transform', function (d, i) {
          return 'translate(' + i * (b.w + b.s) + ', 0)'
        })

        // Remove exiting nodes.
        g.exit().remove()

        // Make the breadcrumb trail visible, if it's hidden.
        breadcrumbs.style('visibility', '')
      }
    }

    return {
      resctict: 'E',
      replace: false,
      scope: {
        nodes: '=',
        maxDepth: '='
      },
      link: link
    }
  })
  // A module exports its name.
  .name
