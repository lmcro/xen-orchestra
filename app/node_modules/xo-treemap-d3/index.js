'use strict'

import angular from 'angular'
import clone from 'lodash.clonedeep'
import d3 from 'd3'

const $ = window.$

export default angular.module('xoTreemapD3', [])
  .directive('treemapChart', function ($parse) {
    function link (scope, element, attrs) {
      var margin,
        width,
        height,
        b,
        breadcrumbs,
        div,
        color,
        treemap,
        max_depth,
        $e

      margin = { top: 40, right: 10, bottom: 10, left: 10 }
      if (attrs.width) {
        width = parseInt(attrs.width, 10)
      } else {
        $e = $(element[0])
        while (!$e.innerWidth() && $e.parent()) {
          $e = $e.parent()
        }
        if ($e.innerWidth()) {
          width = $e.innerWidth()
        } else {
          width = 300
        }
      }
      width -= margin.left - margin.right
      height = attrs.height ? parseInt(attrs.height, 10) : width / 1.5
      max_depth = 0
      color = d3.scale.category10()
      treemap = d3.layout.treemap()
        .size([width, height])
      // .sticky(true)
        .value((d) => d.size)
      b = {
        w: 75, h: 30, s: 3, t: 10
      }
      breadcrumbs = d3.select(element[0])
        .append('div')
        .attr('class', 'breadcrumbs-container')
        .style({ height: '50px', 'text-align': 'left', width: '100%' })
        .append('svg:svg')
        .attr('class', 'breadcrumbs')
        .style({ 'width': '100%' })
        .attr('height', 50)

      div = d3
        .select(element[0])
        .append('div')
        .style('position', 'relative')
        .style('width', (width + margin.left + margin.right) + 'px')
        .style('height', (height + margin.top + margin.bottom) + 'px')
        .style('left', margin.left + 'px')
        .style('top', margin.top + 'px')

      scope.$watch(() => scope.chartData, function (newVal) {
        var g, chart_data

        chart_data = clone(scope.chartData)

        g = div.datum(chart_data)
          .selectAll('.node')
          .data(treemap.nodes)

        g.enter()
          .append('div')
          .attr('class', 'node')
          .style({ border: 'solid 1px lightgray', font: '10px sans-serif', 'line-height': '12px', overflow: 'hidden', position: 'absolute', 'text-indent': '2px' })
          .call(position)
          .style('background', function (d) { return d.color ? d.color : d.children ? color(d.name) : null })
          .text(function (d) { return d.children ? null : d.name })
          .on('mouseover', mouseover)
          .on('click', click)

        g.each(function (d) {
          if (d.depth > max_depth) {
            max_depth = d.depth
          }
        })
          .filter((d, i) => !!scope.click && !d.virtual)
          .style('cursor', 'pointer')
      },
        true)

      function mouseover (d) {
        updateBreadcrumbs(getAncestors(d.id))
        if (scope.over) {
          scope.over.apply(null, [{ d: d }])
        }
      }

      function click (d) {
        if (scope.click) {
          scope.click.apply(null, [{ d: d }])
        }
      }
      function position () {
        this.style('left', function (d) { return d.x + 'px' })
          .style('top', function (d) { return d.y + 'px' })
          .style('width', function (d) { return Math.max(0, d.dx - 1) + 'px' })
          .style('height', function (d) { return Math.max(0, d.dy - 1) + 'px' })
      }

      // from http://stackoverflow.com/questions/15975440/add-ellipses-to-overflowing-text-in-svg
      function wrapText (width) {
        var self,
          textLength,
          text

        self = d3.select(this)
        textLength = self.node().getComputedTextLength()
        text = self.text()
        while (textLength > width && text.length > 0) {
          text = text.slice(0, -1)
          self.text(text + '...')
          textLength = self.node().getComputedTextLength()
        }
      }

      // Generate a string that describes the points of a breadcrumb polygon.
      function breadcrumbPoints (d, i) {
        var points = []
        points.push('0,0')
        points.push(b.w + ',0')
        points.push(b.w + b.t + ',' + (b.h / 2))
        points.push(b.w + ',' + b.h)
        points.push('0,' + b.h)
        if (i > 0) { // Leftmost breadcrumb don't include 6th vertex.
          points.push(b.t + ',' + (b.h / 2))
        }
        return points.join(' ')
      }

      // Update the breadcrumb trail to show the current sequence and percentage.
      function updateBreadcrumbs (nodeArray, percentageString) {
        var g = breadcrumbs
          .selectAll('g')
          .data(nodeArray, function (d) {
            return d.name + d.depth
          })

        var $e = $(element[0]).find('.breadcrumbs-container')
        while ($e.width() === 0 && $e.parent()) {
          $e = $e.parent()
        }
        if ($e.width()) {
          b.w = ($e.width() - b.t) / max_depth - b.s
        }

        // Add breadcrumb and label for entering nodes.
        var entering = g.enter().append('svg:g')

        entering.append('svg:polygon')
          .attr('points', breadcrumbPoints)
          .style('fill', function (d) {
            return d.color ? d.color : color((d.children ? d : d.parent).name)
          })

        entering.append('svg:text')
          .attr('x', (b.w + b.t) / 2)
          .attr('y', b.h / 2)
          .attr('dy', '0.35em')
          .attr('text-anchor', 'middle')
          .text((d) => d.name)
          .each(function (d) { wrapText.apply(this, [b.w - 2 * b.s]) })

        // Set position for entering and updating nodes.
        g.attr('transform', function (d, i) {
          return 'translate(' + i * (b.w + b.s) + ', 0)'
        })

        // Remove exiting nodes.
        g.exit().remove()

        // Make the breadcrumb trail visible, if it's hidden.
        breadcrumbs.style('visibility', '')
      }

      function getAncestors (id) {
        var path = []
        div.selectAll('div')
          .each(function (node) {
            if (node.id === id) {
              var current = node
              while (current.parent) {
                path.unshift(current)
                current = current.parent
              }
            }
          })
        return path
      }
    }

    return {
      resctict: 'E',
      replace: false,
      scope: {
        chartData: '=',
        selected: '=',
        log: '=',
        over: '&',
        click: '&'
      },
      link: link
    }
  })
  // A module exports its name.
  .name
